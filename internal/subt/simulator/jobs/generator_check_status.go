package jobs

import (
	"github.com/jinzhu/gorm"
	"gitlab.com/ignitionrobotics/web/cloudsim/internal/subt/simulator/state"
	"gitlab.com/ignitionrobotics/web/cloudsim/pkg/actions"
	"gitlab.com/ignitionrobotics/web/cloudsim/pkg/simulations"
	"gitlab.com/ignitionrobotics/web/cloudsim/pkg/simulator/jobs"
)

// CheckStatusJobConfig is used to configure a job generated by GenerateCheckStatusJob.
type CheckStatusJobConfig struct {
	Name       string
	PreHooks   []actions.JobFunc
	PostHooks  []actions.JobFunc
	Status     simulations.Status
	InputType  interface{}
	OutputType interface{}
}

// GenerateCheckStatusJob generates checkers that assert that a simulation has a certain status.
func GenerateCheckStatusJob(config CheckStatusJobConfig) *actions.Job {
	return jobs.CheckSimulationStatus.Extend(actions.Job{
		Name:       config.Name,
		PreHooks:   append(config.PreHooks),
		PostHooks:  append(config.PostHooks, assertStatus, returnState),
		InputType:  actions.GetJobDataType(config.InputType),
		OutputType: actions.GetJobDataType(config.OutputType),
	})
}

func generateCheckStartSimulationStatusInputPreHook(status simulations.Status) actions.JobFunc {
	return func(store actions.Store, tx *gorm.DB, deployment *actions.Deployment, value interface{}) (interface{}, error) {
		s := value.(*state.StartSimulation)

		sim, err := s.Services().Simulations().Get(s.GroupID)
		if err != nil {
			return nil, err
		}

		return jobs.CheckSimulationStatusInput{
			Simulation: sim,
			Status:     status,
		}, nil
	}
}

func generateCheckStopSimulationStatusInputPreHook(status simulations.Status) actions.JobFunc {
	return func(store actions.Store, tx *gorm.DB, deployment *actions.Deployment, value interface{}) (interface{}, error) {
		s := value.(*state.StopSimulation)

		sim, err := s.Services().Simulations().Get(s.GroupID)
		if err != nil {
			return nil, err
		}

		store.SetState(s)

		return jobs.CheckSimulationStatusInput{
			Simulation: sim,
			Status:     status,
		}, nil
	}
}

// assertStatus validates that the simulation has a certain status.
func assertStatus(store actions.Store, tx *gorm.DB, deployment *actions.Deployment, value interface{}) (interface{}, error) {
	result := value.(jobs.CheckSimulationStatusOutput)
	if !result {
		return nil, simulations.ErrIncorrectStatus
	}
	return value, nil
}
