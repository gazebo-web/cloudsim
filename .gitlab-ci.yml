image: registry.gitlab.com/ignitionrobotics/web/images/cloudsim-pipelines

variables:
  PKG_NAME: gitlab.com/ignitionrobotics/web/cloudsim
  MYSQL_DATABASE: "cloudsim_test"
  MYSQL_ROOT_PASSWORD: "root"

##########################################################
# Aliases

.setup_project: &setup_project
  - cd /builds/ignitionrobotics/web/cloudsim
  - mkdir -p -v $GOPATH/src/$PKG_NAME/vendor
  - mv -f * $GOPATH/src/$PKG_NAME
  - cd $GOPATH/src/$PKG_NAME

.gitlab_credentials: &setup_git_credentials
  - git config --global user.name "ign-cloudsim"
  - git config --global user.email "ign-cloudsim@test.org"

.dep_ensure: &dep_ensure
  - $GOPATH/bin/dep ensure -vendor-only
  - $GOPATH/bin/dep status

.dep_ensure_post: &dep_ensure_post
  - mkdir -p -v /builds/ignitionrobotics/web/cloudsim/vendor
  - mv /go/src/gitlab.com/ignitionrobotics/web/cloudsim/vendor/* /builds/ignitionrobotics/web/cloudsim/vendor/

.setup_db: &setup_db
  - mysql -u root -proot -h mysql -e "CREATE DATABASE usersdb_test"

##########################################################
# Cache configuration

cache:
  untracked: true
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/
    - /builds/ignitionrobotics/web/cloudsim/vendor/
    - /go/src/gitlab.com/ignitionrobotics/web/cloudsim/vendor/

##########################################################
# Stages

stages:
  - installing
  - formatting
  - linting
  - testing
  - building
  - packaging
  - deploying

##########################################################
# Installing stage

proto:
  stage: installing
  before_script:
    - cd ./ign-transport/proto/
  script:
    - protoc --proto_path=. --go_out=. ignition/msgs/*.proto
  artifacts:
    paths:
      - /builds/ignitionrobotics/web/cloudsim/ign-transport/proto/ignition/msgs/*.go
    expire_in: 1 month
  tags:
    - gitlab-org

dep:
  stage: installing
  before_script:
    - *setup_project
  script:
    - *dep_ensure
  after_script:
    - *dep_ensure_post
  tags:
    - gitlab-org

##########################################################
# Formatting stage

format:
  stage: formatting
  before_script:
    - *setup_project
    - *setup_git_credentials
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
  tags:
    - gitlab-org

##########################################################
# Linting stage

lint:
  stage: linting
  before_script:
    - *setup_project
    - *setup_git_credentials
  script:
    - golint -set_exit_status $(go list ./... | grep -v /vendor/)
  tags:
    - gitlab-org

##########################################################
# Testing stage

vet:
  stage: testing
  dependencies:
    - proto
  before_script:
    - *setup_project
    - *setup_git_credentials
    - *dep_ensure
    - *setup_db
  script:
    - go vet $(go list ./... | grep -v /vendor/)
  after_script:
    - *dep_ensure_post
  services:
    - mysql:5.7
  environment:
    name: testing
  tags:
    - gitlab-org

test:
  stage: testing
  dependencies:
    - proto
  before_script:
    - *setup_project
    - *setup_git_credentials
    - *dep_ensure
    - *setup_db
  script:
    - go test $(go list ./... | grep -v /vendor/)
  after_script:
    - *dep_ensure_post
  services:
    - mysql:5.7
  environment:
    name: testing
  tags:
    - gitlab-org

race:
  stage: testing
  dependencies:
    - proto
  before_script:
    - *setup_project
    - *setup_git_credentials
    - *dep_ensure
    - *setup_db
  script:
    - go test -race $(go list ./... | grep -v /vendor/)
  after_script:
    - *dep_ensure_post
  services:
    - mysql:5.7
  environment:
    name: testing
  allow_failure: true
  tags:
    - gitlab-org

coverage:
  stage: testing
  dependencies:
    - proto
  before_script:
    - *setup_project
    - *setup_git_credentials
    - *dep_ensure
    - *setup_db
  script:
    - go test -covermode=atomic -coverprofile=coverage.tx
    - go tool cover -func=coverage.tx
    - bash <(curl -s https://codecov.io/bash)
  after_script:
    - *dep_ensure_post
  services:
    - mysql:5.7
  environment:
    name: testing
  tags:
    - gitlab-org

##########################################################
# Building stage

build:
  stage: building
  dependencies:
    - proto
  before_script:
    - *setup_project
    - *setup_git_credentials
    - *dep_ensure
  script:
    - go build
  artifacts:
    paths:
      - ${GOPATH}/src/${PKG_NAME}/cloudsim
    expire_in: 1 month
  tags:
    - gitlab-org


##########################################################
# Packaging stage - WIP

package_default:
  stage: packaging
  image: docker
  services:
    - docker:dind
  except:
    - develop
    - master
  dependencies:
    - proto
    - build
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - docker version
    - docker info
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker pull $CI_REGISTRY_IMAGE:next || true"
    - "docker build --cache-from $CI_REGISTRY_IMAGE:next --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA ."
    - "docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  tags:
    - gitlab-org-docker

package_next:
  stage: packaging
  image: docker
  only:
    - develop
  services:
    - docker:dind
  dependencies:
    - proto
    - build
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - docker version
    - docker info
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker pull $CI_REGISTRY_IMAGE || true"
    - "docker build --cache-from $CI_REGISTRY_IMAGE --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:next ."
    - "docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - "docker push $CI_REGISTRY_IMAGE:next"
  tags:
    - gitlab-org-docker

package_latest:
  stage: packaging
  image: docker
  only:
    - master
  services:
    - docker:dind
  dependencies:
    - proto
    - build
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker version
    - docker info
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker pull $CI_REGISTRY_IMAGE || true"
    - "docker build --cache-from $CI_REGISTRY_IMAGE --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest ."
    - "docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - "docker push $CI_REGISTRY_IMAGE:latest"
  after_script:
    - "docker logout ${CI_REGISTRY}"
  tags:
    - gitlab-org-docker

##########################################################
# Deploying stage

integration:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploying
  dependencies:
    - package_default
  script:
    - sed -i "s@<CONTAINER_IMAGE>@$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA@" ./deployments/02-deployment.yaml
    - kubectl apply -f ./deployments/00-namespace.yaml
    - kubectl apply -f ./deployments/01-service.yaml
    - kubectl apply -f ./deployments/02-deployment.yaml
  tags:
    - kubernetes
  environment:
    name: integration
  except:
    - master
    - develop
  when: manual

integration_1:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploying
  dependencies:
    - package_default
  script:
    - sed -i "s@<CONTAINER_IMAGE>@$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA@" ./deployments/02-deployment.yaml
    - kubectl apply -f ./deployments/00-namespace.yaml
    - kubectl apply -f ./deployments/01-service.yaml
    - kubectl apply -f ./deployments/02-deployment.yaml
  tags:
    - kubernetes
  environment:
    name: integration_1
  except:
    - master
    - develop
  when: manual

staging:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploying
  dependencies:
    - package_next
  script:
    - sed -i "s@<CONTAINER_IMAGE>@$CI_REGISTRY_IMAGE:next@" ./deployments/02-deployment.yaml
    - kubectl apply -f ./deployments/00-namespace.yaml
    - kubectl apply -f ./deployments/01-service.yaml
    - kubectl apply -f ./deployments/02-deployment.yaml
  tags:
    - kubernetes
  environment:
    name: staging
  only:
    - develop
  when: manual

production:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploying
  dependencies:
    - package_latest
  script:
    - sed -i "s@<CONTAINER_IMAGE>@$CI_REGISTRY_IMAGE:latest@" ./deployments/02-deployment.yaml
    - kubectl apply -f ./deployments/00-namespace.yaml
    - kubectl apply -f ./deployments/01-service.yaml
    - kubectl apply -f ./deployments/02-deployment.yaml
  tags:
    - kubernetes
  environment:
    name: production
  only:
    - master
  when: manual
