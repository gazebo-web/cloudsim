image: registry.gitlab.com/ignitionrobotics/web/images/cloudsim-pipelines:1.1.0


variables:
  PKG_NAME: gitlab.com/ignitionrobotics/web/cloudsim
  MYSQL_DATABASE: "cloudsim_test"
  MYSQL_ROOT_PASSWORD: "root"
  KUBERNETES_POLL_TIMEOUT: 540

##########################################################
# Aliases

.setup_modules: &setup_modules
  - mkdir -p -v $GOPKGPATH

.download_modules: &download_modules
  - go mod download

.gitlab_credentials: &setup_git_credentials
  - git config --global user.name "ign-cloudsim"
  - git config --global user.email "ign-cloudsim@test.org"

.setup_db: &setup_db
  - mysql -u root -proot -h mysql -e "CREATE DATABASE usersdb_test"

# Deploys to a Kubernetes cluster.
# $IMAGE_TAG must be set before calling this.
.deploy_kubernetes: &deploy_kubernetes
  - export CONTAINER_IMAGE="$CI_REGISTRY_IMAGE:$IMAGE_TAG"
  - export APP_SELECTOR="$APPLICATION_NAME-primary"
  - export HEY_CMD="hey -z 15s -q 5 -c 2 http://$APPLICATION_NAME-canary.$APPLICATION_ENVIRONMENT.svc.cluster.local/healthz"
  - envsubst < "./deployments/00-namespace.yaml"
  - envsubst < "./deployments/00-namespace.yaml"  | kubectl apply -f -
  - envsubst < "./deployments/01-deployment.yaml"
  - envsubst < "./deployments/01-deployment.yaml" | kubectl apply -f -
  - envsubst < "./deployments/02-blue-green.yaml"
  - envsubst < "./deployments/02-blue-green.yaml" | kubectl apply -f -

.set_image_tag_to_branch_name: &set_image_tag_to_branch_name
  - IMAGE_TAG=$(echo $CI_COMMIT_REF_NAME | sed s@/@-@)

# Builds a docker image for the current version.
# $IMAGE_CACHE and $IMAGE_TAG must be set before calling this.
.build_docker: &build_docker
  - echo "Creating docker image with tag $IMAGE_TAG."
  - docker pull $CI_REGISTRY_IMAGE:$IMAGE_CACHE || true
  - DOCKER_BUILDKIT=1 docker build --cache-from $CI_REGISTRY_IMAGE:$IMAGE_CACHE --tag $CI_REGISTRY_IMAGE:$IMAGE_TAG .
  - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

##########################################################
# Cache configuration

.go-cache:
  # Paths in the cache need to be in the build directory or Gitlab will ignore them
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
    GOPKGPATH: $CI_PROJECT_DIR/.go/pkg/mod
  cache:
    paths:
      - $GOPKGPATH/

##########################################################
# Stages

stages:
  - install
  - format
  - test
  - package
  - deploy

##########################################################
# Installing stage

proto:
  stage: install
  before_script:
    - cd ./ign-transport/proto/
  script:
    - protoc --proto_path=. --go_out=. ignition/msgs/*.proto
  artifacts:
    paths:
      - /builds/ignitionrobotics/web/cloudsim/ign-transport/proto/ignition/msgs/*.go
    expire_in: 1 month
  tags:
    - gitlab-org

dependencies:
  stage: install
  extends: .go-cache
  before_script:
    - *setup_modules
  script:
    - *download_modules
    - ls $GOPKGPATH
  tags:
    - gitlab-org

##########################################################
# Formatting stage

fmt:
  stage: format
  extends: .go-cache
  before_script:
    - *setup_modules
    - *setup_git_credentials
  script:
    - go fmt $(go list ./...)
  tags:
    - gitlab-org

lint:
  stage: format
  extends: .go-cache
  before_script:
    - *setup_modules
    - *setup_git_credentials
  script:
    - golint -set_exit_status $(go list ./...)
  tags:
    - gitlab-org

###########################################################
## Testing stage

vet:
  stage: test
  extends: .go-cache
  dependencies:
    - proto
  before_script:
    - *setup_modules
    - *setup_git_credentials
    - *setup_db
  script:
    - go vet $(go list ./...)
  services:
    - mysql:5.7
  environment:
    name: testing
  tags:
    - gitlab-org

test:
  stage: test
  extends: .go-cache
  dependencies:
    - proto
  before_script:
    - *setup_modules
    - *setup_git_credentials
    - *setup_db
    - go install github.com/jstemmer/go-junit-report
  script:
    - go test -p 1 -v $(go list ./...) 2>&1 | tee test_output
  after_script:
    - $GOPATH/bin/go-junit-report -set-exit-code < test_output > report.xml
  services:
    - mysql:5.7
  environment:
    name: testing
  allow_failure: true
  tags:
    - gitlab-org
  artifacts:
    when: always
    reports:
      junit: report.xml

race:
  stage: test
  extends: .go-cache
  dependencies:
    - proto
  before_script:
    - *setup_modules
    - *setup_git_credentials
    - *setup_db
  script:
    - go test -p 1 -v -failfast -race $(go list ./...)
  services:
    - mysql:5.7
  environment:
    name: testing
  allow_failure: true
  tags:
    - gitlab-org

coverage:
  stage: test
  extends: .go-cache
  dependencies:
    - proto
  before_script:
    - *setup_modules
    - *setup_git_credentials
    - *setup_db
  script:
    - go test -p 1 -v -failfast -covermode=atomic -coverprofile=coverage.tx  $(go list ./...)
    - go tool cover -func=coverage.tx
    - bash <(curl -s https://codecov.io/bash)
  services:
    - mysql:5.7
  environment:
    name: testing
  allow_failure: true
  tags:
    - gitlab-org

###########################################################
## Packaging stage

.docker:
  stage: package
  image: docker
  services:
    - docker:dind
  dependencies:
    - proto
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - docker version
    - docker info
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  after_script:
    - "docker logout ${CI_REGISTRY}"
  tags:
    - docker

# Tag docker images with the ref name for feature branches.
# Ref names will have any forward slashes '/' converted to dashes '-'.
docker:branch:
  stage: package
  extends: .docker
  script:
    - IMAGE_CACHE=latest
    - *set_image_tag_to_branch_name
    - *build_docker
  only:
    - branches
  except:
    - /^master$/

docker:latest:
  stage: package
  extends: .docker
  only:
    - master
  script:
    - IMAGE_CACHE=develop
    - IMAGE_TAG=latest
    - *build_docker

docker:release:
  stage: package
  extends: .docker
  only:
    - tags
  script:
    - IMAGE_CACHE=develop
    - IMAGE_TAG=$CI_COMMIT_TAG
    - *build_docker

###########################################################
## Deploying stage

integration:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploy
  dependencies:
    - docker:branch
  script:
    - *set_image_tag_to_branch_name
    - *deploy_kubernetes
  tags:
    - testing
    - kubernetes
    - osrf
  environment:
    name: integration
  except:
    - master
    - develop
  when: manual

integration_1:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploy
  dependencies:
    - docker:branch
  script:
    - *set_image_tag_to_branch_name
    - *deploy_kubernetes
  tags:
    - testing
    - kubernetes
    - osrf
  environment:
    name: integration-1
  except:
    - master
    - develop
  when: manual

staging:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploy
  dependencies:
    - docker:branch
  script:
    - IMAGE_TAG=develop
    - *deploy_kubernetes
  tags:
    - testing
    - kubernetes
    - osrf
  environment:
    name: staging
  only:
    - develop
  when: manual

subt-staging:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploy
  dependencies:
    - docker:branch
  script:
    - IMAGE_TAG=develop
    - *deploy_kubernetes
  tags:
    - testing
    - kubernetes
    - subt
  environment:
    name: subt-staging
  only:
    - develop
  when: manual

subt:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploy
  dependencies:
    - docker:release
  script:
    - IMAGE_TAG=$CI_COMMIT_TAG
    - *deploy_kubernetes
  tags:
    - kubernetes
    - subt
  environment:
    name: production
  only:
    - tags
  when: manual
