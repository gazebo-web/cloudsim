image: registry.gitlab.com/ignitionrobotics/web/images/cloudsim-pipelines


variables:
  PKG_NAME: gitlab.com/ignitionrobotics/web/cloudsim
  MYSQL_DATABASE: "cloudsim_test"
  MYSQL_ROOT_PASSWORD: "root"
  KUBERNETES_POLL_TIMEOUT: 540

##########################################################
# Aliases

.setup_project: &setup_project
  - cd /builds/ignitionrobotics/web/cloudsim
  - mkdir -p -v $GOPATH/src/$PKG_NAME/vendor
  - mv -f * $GOPATH/src/$PKG_NAME
  - cd $GOPATH/src/$PKG_NAME

.gitlab_credentials: &setup_git_credentials
  - git config --global user.name "ign-cloudsim"
  - git config --global user.email "ign-cloudsim@test.org"

.dep_ensure: &dep_ensure
  - $GOPATH/bin/dep ensure -vendor-only
  - $GOPATH/bin/dep status

.dep_ensure_post: &dep_ensure_post
  - mkdir -p -v /builds/ignitionrobotics/web/cloudsim/vendor
  - mv /go/src/gitlab.com/ignitionrobotics/web/cloudsim/vendor/* /builds/ignitionrobotics/web/cloudsim/vendor/

.setup_db: &setup_db
  - mysql -u root -proot -h mysql -e "CREATE DATABASE usersdb_test"

.deploy_kubernetes: &deploy_kubernetes
  - export CONTAINER_IMAGE="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  - export APP_SELECTOR="$APPLICATION_NAME-primary"
  - export HEY_CMD="hey -z 15s -q 5 -c 2 http://$APPLICATION_NAME-canary.$APPLICATION_ENVIRONMENT.svc.cluster.local/healthz"
  - envsubst < "./deployments/00-namespace.yaml"
  - envsubst < "./deployments/00-namespace.yaml"  | kubectl apply -f -
  - envsubst < "./deployments/01-deployment.yaml"
  - envsubst < "./deployments/01-deployment.yaml" | kubectl apply -f -
  - envsubst < "./deployments/02-blue-green.yaml"
  - envsubst < "./deployments/02-blue-green.yaml" | kubectl apply -f -

##########################################################
# Cache configuration

cache:
  untracked: true
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - /builds/ignitionrobotics/web/cloudsim/vendor/
    - /go/src/gitlab.com/ignitionrobotics/web/cloudsim/vendor/

##########################################################
# Stages

stages:
  - install
  - format
  - test
  - package
  - deploy

##########################################################
# Installing stage

proto:
  stage: install
  before_script:
    - cd ./ign-transport/proto/
  script:
    - protoc --proto_path=. --go_out=. ignition/msgs/*.proto
  artifacts:
    paths:
      - /builds/ignitionrobotics/web/cloudsim/ign-transport/proto/ignition/msgs/*.go
    expire_in: 1 month
  tags:
    - gitlab-org

dep:
  stage: install
  before_script:
    - *setup_project
  script:
    - *dep_ensure
    - *dep_ensure_post
  tags:
    - gitlab-org

##########################################################
# Formatting stage

fmt:
  stage: format
  before_script:
    - *setup_project
    - *setup_git_credentials
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
  tags:
    - gitlab-org

lint:
  stage: format
  before_script:
    - *setup_project
    - *setup_git_credentials
  script:
    - golint -set_exit_status $(go list ./... | grep -v /vendor/)
  tags:
    - gitlab-org

##########################################################
# Testing stage

vet:
  stage: test
  dependencies:
    - proto
  before_script:
    - *setup_project
    - *setup_git_credentials
    - *dep_ensure
    - *setup_db
  script:
    - go vet $(go list ./... | grep -v /vendor/)
  services:
    - mysql:5.7
  environment:
    name: testing
  tags:
    - gitlab-org

test:
  stage: test
  dependencies:
    - proto
  before_script:
    - *setup_project
    - *setup_git_credentials
    - *dep_ensure
    - *setup_db
  script:
    - go test $(go list ./... | grep -v /vendor/)
  services:
    - mysql:5.7
  environment:
    name: testing
  tags:
    - gitlab-org

race:
  stage: test
  dependencies:
    - proto
  before_script:
    - *setup_project
    - *setup_git_credentials
    - *dep_ensure
    - *setup_db
  script:
    - go test -race $(go list ./... | grep -v /vendor/)
  services:
    - mysql:5.7
  environment:
    name: testing
  allow_failure: true
  tags:
    - gitlab-org

coverage:
  stage: test
  dependencies:
    - proto
  before_script:
    - *setup_project
    - *setup_git_credentials
    - *dep_ensure
    - *setup_db
  script:
    - go test -covermode=atomic -coverprofile=coverage.tx
    - go tool cover -func=coverage.tx
    - bash <(curl -s https://codecov.io/bash)
  services:
    - mysql:5.7
  environment:
    name: testing
  tags:
    - gitlab-org

##########################################################
# Packaging stage

docker:
  stage: package
  image: docker
  services:
    - docker:dind
  except:
    - develop
    - master
  dependencies:
    - proto
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - docker version
    - docker info
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker pull $CI_REGISTRY_IMAGE:next || true"
    - "docker build --cache-from $CI_REGISTRY_IMAGE:next --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA ."
    - "docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  after_script:
    - "docker logout ${CI_REGISTRY}"
  tags:
    - docker

docker:next:
  stage: package
  image: docker
  only:
    - develop
  services:
    - docker:dind
  dependencies:
    - proto
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - docker version
    - docker info
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker pull $CI_REGISTRY_IMAGE || true"
    - "docker build --cache-from $CI_REGISTRY_IMAGE --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:next ."
    - "docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - "docker push $CI_REGISTRY_IMAGE:next"
  after_script:
    - "docker logout ${CI_REGISTRY}"
  tags:
    - docker

docker:latest:
  stage: package
  image: docker
  only:
    - master
  services:
    - docker:dind
  dependencies:
    - proto
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker version
    - docker info
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker pull $CI_REGISTRY_IMAGE || true"
    - "docker build --cache-from $CI_REGISTRY_IMAGE --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest ."
    - "docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - "docker push $CI_REGISTRY_IMAGE:latest"
  after_script:
    - "docker logout ${CI_REGISTRY}"
  tags:
    - docker

##########################################################
# Deploying stage

integration:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploy
  dependencies:
    - docker
  script:
    - *deploy_kubernetes
  tags:
    - testing
    - kubernetes
  environment:
    name: integration
  except:
    - master
    - develop
  when: manual

integration_1:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploy
  dependencies:
    - docker
  script:
    - *deploy_kubernetes
  tags:
    - testing
    - kubernetes
  environment:
    name: integration-1
  except:
    - master
    - develop
  when: manual

staging:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploy
  dependencies:
    - docker:next
  script:
    - *deploy_kubernetes
  tags:
    - testing
    - kubernetes
  environment:
    name: staging
  only:
    - develop
  when: manual

production:
  image: registry.gitlab.com/ignitionrobotics/web/images/kubectl:latest
  stage: deploy
  dependencies:
    - docker:latest
  script:
    - *deploy_kubernetes
  tags:
    - kubernetes
    - production
  environment:
    name: production
  only:
    - master
  when: manual
